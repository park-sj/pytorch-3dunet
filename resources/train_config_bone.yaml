# use a fixed random seed to guarantee that when you run the code twice you will get the same outcome
# manual_seed: 0
# model configuration
model:
  # model class, e.g. UNet3D, ResidualUNet3D, NoNewReversible
  name: ResidualUNet3D
  # number of input channels to the model
  in_channels: 1
  # number of output channels
  out_channels: 1
  # determines the order of operators in a single layer (gcr - GroupNorm+Conv3d+ReLU)
  layer_order: gcr
  # feature maps scale factor
  f_maps: 16
  # number of groups in the groupnorm
  num_groups: 4
  # number of levels in the encoder/decoder path
  num_levels: 6
  # apply element-wise nn.Sigmoid after the final 1x1 convolution, otherwise apply nn.Softmax
  final_sigmoid: true
  # if True applies the final normalization layer (sigmoid or softmax), otherwise the networks returns the output from the final convolution layer; use False for regression problems, e.g. de-noising
  is_segmentation: true
# trainer configuration
trainer:
  # path to the checkpoint directory
  checkpoint_dir: 3dunet
  # path to latest checkpoint; if provided the training will be resumed from that checkpoint
  resume: Null
  # how many iterations between validations
  validate_after_iters: 10
  # how many iterations between tensorboard logging
  log_after_iters: 10
  # max number of epochs
  epochs: 100
  # max number of iterations
  iters: 1000
  # model with higher eval score is considered better
  eval_score_higher_is_better: True
# optimizer configuration
optimizer:
  # initial learning rate
  learning_rate: 0.000002
  # weight decay
  weight_decay: 0.0001
# loss function configuration
loss:
  # loss function to be used during training
  name: ActiveContourLoss
  # A manual rescaling weight given to each class.
  weight: null
  lambdaP: 50.0
  # a target value that is ignored and does not contribute to the input gradient
  ignore_index: null
# evaluation metric configuration
eval_metric:
  # use AdaptedRandError metric
  name: MeanIoU
  # probability maps thresholds to validate on
  thresholds: [0.5]
  # use the last target channel to compute the metric
  use_last_target: true
  # use only the first channel for computing the metric
  input_channel: 0
lr_scheduler:
  name: CosineAnnealingWarmUpRestarts
  T_0: 100
  eta_max: 0.001
  T_up: 20
  gamma: 0.5
# data loaders configuration
loaders:
  dataset: NpzDataset
  # batch dimension; if number of GPUs is N > 1, then a batch_size of N * batch_size will automatically be taken for DataParallel
  batch_size: 4
  # how many subprocesses to use for data loading
  num_workers: 4
  # path to the raw data within the H5
  raw_internal_path: raw
  # path to the the label data withtin the H5
  label_internal_path: label
  # path to the pixel-wise weight map withing the H5 if present
  weight_internal_path: null
  # configuration of the train loader
  train:
    # absolute paths to the training datasets; if a given path is a directory all H5 files ('*.h5', '*.hdf', '*.hdf5', '*.hd5')
    # inside this this directory will be included as well (non-recursively)
    file_paths:
      - '/media/shkim/7cf97277-d9cd-454f-994f-59734f6775d0/seg_data/bone/train/'
    slice_builder:
      # SliceBuilder class
      name: SliceBuilder
      # train patch size given to the network (adapt to fit in your GPU mem, generally the bigger patch the better)
      patch_shape: [128, 128, 128]
      stride_shape: [120, 120, 120] # [120, 96] or [240, 180]
    # data transformations/augmentations
    transformer:
      raw:
        # min-max scaling, range of the data shrinks to [-1,1]
        - name: Normalize
          min_value: -500
          max_value: 2000
        # resize by scikit-image library
        - name: Resize
          shape: [128, 128, 128]
        # convert to torch tensor
        - name: ToTensor
          # add additional 'channel' axis when the input data is 3D
          expand_dims: true
      label:
        # resize by scikit-image library
        - name: Resize
          shape: [128, 128, 128]
        - name: ToTensor
          expand_dims: true
  # configuration of the validation loaders
  val:
    file_paths:
      - '/media/shkim/7cf97277-d9cd-454f-994f-59734f6775d0/seg_data/bone/val/'
    slice_builder:
      # SliceBuilder class
      name: SliceBuilder
      # train patch size given to the network (adapt to fit in your GPU mem, generally the bigger patch the better)
      patch_shape: [128, 128, 128]
      stride_shape: [120, 120, 120] # [120, 96] or [240, 180]
    transformer:
      raw:
        # min-max scaling, range of the data shrinks to [-1,1]
        - name: Normalize
          min_value: -500
          max_value: 2000
        # resize by scikit-image library
        - name: Resize
          shape: [128, 128, 128]
        - name: ToTensor
          expand_dims: true
      label:
        # resize by scikit-image library
        - name: Resize
          shape: [128, 128, 128]
        - name: ToTensor
          expand_dims: true
